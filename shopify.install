<?php
/**
 * @file
 * Contains install and uninstall functionality.
 */

/**
 * Implements hook_requirements().
 */
function shopify_requirements($phase) {
  backdrop_load('module', 'shopify');
  $requirements = array();
  $t = get_t();
  if ($phase == 'install') {
    // Check if we're running a 64-bit version of PHP.
    if (PHP_INT_SIZE === 4) {
      $requirements['shopify_ecommerce'] = array(
        'title' => $t('Shopify eCommerce'),
        'description' => $t('Unable to install Shopify eCommerce. Your server is running the 32-bit version of PHP. A 64-bit version is required.'),
        'severity' => REQUIREMENT_ERROR,
      );
      return $requirements;
    }
  }
  elseif ($phase == 'runtime') {
    // No credentials provided for Shopify API.
    $client = shopify_api_get_client();
    if (!$client instanceof BasicShopifyAPI) {
      $requirements['shopify_ecommerce'] = array(
        'title' => $t('Shopify eCommerce'),
        'description' => $t('Unable to install Shopify eCommerce. Do you have a <a href="@shopify_website">Shopify Account</a>? If so, make sure you\'ve entered your API credentials at <a href="@shopify_api_config">/admin/shopify/api</a>', array(
          '@shopify_website' => 'https://www.shopify.com/?ref=bonify',
          '@shopify_api_config' => url('admin/shopify/api'),
        )),
        'severity' => REQUIREMENT_ERROR,
      );
      return $requirements;
    }
    // Attempt to connect and get basic store information.
    try {
      $client = shopify_api_get_client();
      if ($client) {
        $client->rest('GET', '/admin/shop.json');
        $requirements[$key] = array(
          'title' => t('Shopify'),
          'value' => t('API credentials connect successfully.'),
          'severity' => REQUIREMENT_OK,
        );
      }
    }
    catch (Exception $e) {
      $requirements['shopify_ecommerce'] = array(
        'title' => $t('Shopify eCommerce'),
        'description' => $t('Cannot connect your credentials to the Shopify API. Do you have a <a href="@shopify_website">Shopify Account</a>? <a href="@shopify_api_config">Are your API settings correct</a>?', array(
          '@shopify_website' => 'https://www.shopify.com/?ref=bonify',
          '@shopify_api_config' => url('admin/shopify/api'),
        )),
        'severity' => REQUIREMENT_ERROR,
      );
      return $requirements;
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function shopify_schema() {
  $schema['shopify_products'] = array(
    'description' => 'Base table for storing Shopify products.',
    'fields' => array(
      'id' => array(
        'description' => 'Shopify product ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'product_id' => array(
        'type' => 'int',
        'description' => 'Product ID',
        'size' => 'big',
      ),
      'variant_id' => array(
        'type' => 'int',
        'description' => 'Variant ID',
        'default' => 0,
        'size' => 'big',
      ),
      'title' => array(
        'description' => 'Product title',
        'type' => 'varchar',
        'length' => 512,
        'not null' => TRUE,
        'default' => '',
      ),
      'body_html' => array(
        'description' => 'Product body HTML',
        'type' => 'text',
      ),
      'handle' => array(
        'description' => 'Product handle',
        'type' => 'varchar',
        'length' => 128,
      ),
      'product_type' => array(
        'description' => 'Product type',
        'type' => 'varchar',
        'length' => 32,
      ),
      'published_scope' => array(
        'description' => 'Published scope',
        'type' => 'varchar',
        'length' => 32,
      ),
      'vendor' => array(
        'description' => 'Vendor',
        'type' => 'varchar',
        'length' => 32,
      ),
      'tags' => array(
        'description' => 'Tags',
        'type' => 'varchar',
        'length' => 512,
      ),
      'options' => array(
        'description' => 'Options',
        'type' => 'blob',
      ),
      'barcode' => array(
        'description' => 'Barcode',
        'type' => 'varchar',
        'length' => 128,
      ),
      'compare_at_price' => array(
        'description' => 'Product comparison price',
        'type' => 'numeric',
        'scale' => 2,
        'precision' => 10,
      ),
      'fulfillment_service' => array(
        'description' => 'Fulfillment Service',
        'type' => 'varchar',
        'length' => 16,
      ),
      'grams' => array(
        'description' => 'Grams',
        'type' => 'int',
      ),
      'inventory_management' => array(
        'description' => 'Inventory management',
        'type' => 'varchar',
        'length' => 32,
      ),
      'inventory_policy' => array(
        'description' => 'Inventory policy',
        'type' => 'varchar',
        'length' => 32,
      ),
      'inventory_quantity' => array(
        'description' => 'Inventory quantity',
        'type' => 'int',
      ),
      'old_inventory_quantity' => array(
        'description' => 'Old inventory quantity',
        'type' => 'int',
      ),
      'option_values' => array(
        'description' => 'Option values',
        'type' => 'text',
      ),
      'price' => array(
        'description' => 'Product price',
        'type' => 'numeric',
        'scale' => 2,
        'precision' => 10,
      ),
      'requires_shipping' => array(
        'description' => 'Requires shipping',
        'type' => 'int',
        'size' => 'tiny',
      ),
      'sku' => array(
        'description' => 'SKU',
        'type' => 'varchar',
        'length' => 64,
      ),
      'taxable' => array(
        'description' => 'Requires shipping',
        'type' => 'int',
        'size' => 'tiny',
      ),
      'weight' => array(
        'description' => 'Product weight',
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 2,
      ),
      'weight_unit' => array(
        'description' => 'Weight unit',
        'type' => 'varchar',
        'length' => 8,
      ),
      'created_at' => array(
        'description' => 'Created at',
        'type' => 'int',
      ),
      'published_at' => array(
        'description' => 'Published at',
        'type' => 'int',
      ),
      'updated_at' => array(
        'description' => 'Updated at',
        'type' => 'int',
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function shopify_install() {

  shopify_products_reset_sync_datestamp();

  // Set the shop info on install.
  $client = shopify_api_get_client();
  $info = $client->rest('GET', '/admin/shop.json');
  config_set('shopify.settings', 'store_info', $info);

//  Create Shopify Tags vocabulary
  $vocabulary = new TaxonomyVocabulary();
  $vocabulary->name = 'Shopify Tags';
  $vocabulary->machine_name = 'shopify_tags';
  taxonomy_vocabulary_save($vocabulary);

  // Create Shopify Collections vocabulary
  $vocabulary = new TaxonomyVocabulary();
  $vocabulary->name = 'Shopify Collections';
  $vocabulary->machine_name = 'shopify_collections';
  taxonomy_vocabulary_save($vocabulary);

  // Create product image field
  field_create_field(
    array(
    'field_name' => 'shopify_product_images',
    'type' => 'image',
    'cardinality' => -1,
    'settings' => array(),
  ));


  // Create product image field on product entity
  $instance = array(
    'field_name' => 'shopify_product_images',
    'entity_type' => 'shopify_product',
    'bundle' => 'shopify_product',
    'label' => 'Shopify Product Images',
    'required' => FALSE,
    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'image_style' => 'thumbnail',
        'image_link' => '',
      ),
      'weight' => 0,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'weight' => '0',
        'settings' => array(
          'image_style' => 'shopify_product_thumbnail',
          'image_link' => '',
        ),
        'module' => 'image',
      ),
    ),
  );

  field_create_instance($instance);

  // Create collections published field.
  field_create_field(
    array(
    'field_name' => 'shopify_collection_published_at',
    'type' => 'datestamp',
    'cardinality' => 1,
    'settings' => array(),
  ));


  // Create collections published instance.
  $instance = array(
    'field_name' => 'shopify_collection_published_at',
    'entity_type' => 'taxonomy_term',
    'bundle' => 'shopify_collections',
    'label' => 'Shopify Collection Published Date',
    'required' => FALSE,
  );

  field_create_instance($instance);

  // Create Shopify Tags term reference
  field_create_field(
    array(
    'field_name' => 'shopify_product_tags',
    'type' => 'taxonomy_term_reference',
    'cardinality' => -1,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => 'shopify_tags',
          'parent' => 0,
        ),
      ),
    ),
  )
  );


  // Create product tags term reference on product entity
  $instance = array(
    'field_name' => 'shopify_product_tags',
    'entity_type' => 'shopify_product',
    'bundle' => 'shopify_product',
    'label' => 'Shopify Product Tags',
    'required' => FALSE,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => 1,
    ),
    'display' => array(
      array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'taxonomy_term_reference_link',
          'settings' => array(),
          'module' => 'taxonomy',
          'weight' => 1,
        ),
        'label' => 'hidden',
        'type' => 'taxonomy_term_reference_link',
        'settings' => array(),
        'module' => 'taxonomy',
        'weight' => 33,
      ),
      'default' => array(
        'label' => 'hidden',
        'type' => 'taxonomy_term_reference_link',
        'weight' => '4',
        'settings' => array(),
        'module' => 'taxonomy',
      ),
    ),
  );

  field_create_instance($instance);

  // Create Shopify Collections term reference
  field_create_field(
    array(
    'field_name' => 'shopify_product_collections',
    'type' => 'taxonomy_term_reference',
    'cardinality' => -1,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => 'shopify_collections',
          'parent' => 0,
        ),
      ),
    ),
  )
  );

  // Create product collections term reference on product entity
  $instance = array(
    'field_name' => 'shopify_product_collections',
    'entity_type' => 'shopify_product',
    'bundle' => 'shopify_product',
    'label' => 'Shopify Collections',
    'required' => FALSE,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => 2,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'taxonomy_term_reference_link',
        'weight' => '5',
        'settings' => array(),
        'module' => 'taxonomy',
      ),
    ),
  );

  field_create_instance($instance);

  // Create Shopify Collections Image field
  field_create_field(
    array(
    'field_name' => 'shopify_collection_image',
    'type' => 'image',
    'cardinality' => 1,
    'settings' => array(),
  )
  );

  // Create Shopify Collections Image on collections term entity
  $instance = array(
    'field_name' => 'shopify_collection_image',
    'entity_type' => 'taxonomy_term',
    'bundle' => 'shopify_collections',
    'label' => 'Shopify Collection Image',
    'required' => FALSE,
    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'image_style' => 'thumbnail',
        'image_link' => '',
      ),
    ),
  );

  field_create_instance($instance);

  // Create field to track the collection ID from Shopify.
  field_create_field(
    array(
    'field_name' => 'shopify_collection_id',
    'type' => 'int',
    'size' => 'big',
  )
  );

  $instance = array(
    'field_name' => 'shopify_collection_id',
    'entity_type' => 'taxonomy_term',
    'bundle' => 'shopify_collections',
    'label' => 'Shopify Collection ID',
    'required' => TRUE,
  );

  field_create_instance($instance);

  $product_settings = array(
    'view_modes' => array(
      'full' => array(
        'custom_settings' => FALSE,
      ),
      'teaser' => array(
        'custom_settings' => FALSE,
      ),
      'token' => array(
        'custom_settings' => FALSE,
      ),
      'search_index' => array(
        'custom_settings' => FALSE,
      ),
      'search_result' => array(
        'custom_settings' => FALSE,
      ),
    ),
    'extra_fields' => array(
      'form' => array(
        'metatags' => array(
          'weight' => '3',
        ),
      ),
      'display' => array(
        'product_id' => array(
          'default' => array(
            'weight' => '27',
            'visible' => FALSE,
          ),
        ),
        'variant_id' => array(
          'default' => array(
            'weight' => '26',
            'visible' => FALSE,
          ),
        ),
        'body_html' => array(
          'default' => array(
            'weight' => '1',
            'visible' => TRUE,
          ),
        ),
        'price' => array(
          'default' => array(
            'weight' => '6',
            'visible' => FALSE,
          ),
        ),
        'updated_at' => array(
          'default' => array(
            'weight' => '18',
            'visible' => FALSE,
          ),
        ),
        'created_at' => array(
          'default' => array(
            'weight' => '22',
            'visible' => FALSE,
          ),
        ),
        'published_at' => array(
          'default' => array(
            'weight' => '21',
            'visible' => FALSE,
          ),
        ),
        'title' => array(
          'default' => array(
            'weight' => '5',
            'visible' => FALSE,
          ),
        ),
        'handle' => array(
          'default' => array(
            'weight' => '9',
            'visible' => FALSE,
          ),
        ),
        'product_type' => array(
          'default' => array(
            'weight' => '7',
            'visible' => FALSE,
          ),
        ),
        'published_scope' => array(
          'default' => array(
            'weight' => '23',
            'visible' => FALSE,
          ),
        ),
        'vendor' => array(
          'default' => array(
            'weight' => '24',
            'visible' => FALSE,
          ),
        ),
        'barcode' => array(
          'default' => array(
            'weight' => '25',
            'visible' => FALSE,
          ),
        ),
        'compare_at_price' => array(
          'default' => array(
            'weight' => '20',
            'visible' => FALSE,
          ),
        ),
        'fulfillment_service' => array(
          'default' => array(
            'weight' => '19',
            'visible' => FALSE,
          ),
        ),
        'grams' => array(
          'default' => array(
            'weight' => '12',
            'visible' => FALSE,
          ),
        ),
        'inventory_management' => array(
          'default' => array(
            'weight' => '11',
            'visible' => FALSE,
          ),
        ),
        'inventory_policy' => array(
          'default' => array(
            'weight' => '10',
            'visible' => FALSE,
          ),
        ),
        'inventory_quantity' => array(
          'default' => array(
            'weight' => '13',
            'visible' => FALSE,
          ),
        ),
        'requires_shipping' => array(
          'default' => array(
            'weight' => '14',
            'visible' => FALSE,
          ),
        ),
        'sku' => array(
          'default' => array(
            'weight' => '17',
            'visible' => FALSE,
          ),
        ),
        'taxable' => array(
          'default' => array(
            'weight' => '16',
            'visible' => FALSE,
          ),
        ),
        'weight' => array(
          'default' => array(
            'weight' => '15',
            'visible' => FALSE,
          ),
        ),
        'weight_unit' => array(
          'default' => array(
            'weight' => '8',
            'visible' => FALSE,
          ),
        ),
        'add_to_cart' => array(
          'default' => array(
            'weight' => '2',
            'visible' => TRUE,
          ),
        ),
      ),
    ),
  );

  config_set('shopify.settings', 'field_bundle_settings_shopify_product__shopify_product', $product_settings);
  // Please keep the product settings last.
}

/**
 * Implements hook_uninstall().
 */
function shopify_uninstall() {
  field_delete_field('shopify_product_images');
  field_delete_field('shopify_collection_image');
  field_delete_field('shopify_product_tags');
  field_delete_field('shopify_product_collections');
  field_delete_field('shopify_collection_id');
  field_delete_field('shopify_collection_published_at');
  taxonomy_vocabulary_delete('shopify_tags');
  taxonomy_vocabulary_delete('shopify_collections');
  field_purge_batch(20);
}

/**
 * Implements hook_update_last_removed().
 */
function shopify_update_last_removed() {
  return 7105;
}

/**
 * Migrate shopify variables to config.
 */
function shopify_update_1000() {
  $config = config('shopify.settings');

  // Migrate variables from Shopify API module.
  $config->set('api_domain', update_variable_get('shopify_api_domain', ''));
  $config->set('api_token', update_variable_get('shopify_api_token', ''));
  $config->set('api_key', update_variable_get('shopify_api_key', ''));
  $config->set('api_secret', update_variable_get('shopify_api_secret', ''));

  // Migrate variables from Shopify module.
  $config->set('last_product_sync', update_variable_get('shopify_last_product_sync', ''));
  $config->set('last_collection_sync', update_variable_get('shopify_last_collection_sync', ''));
  $config->set('cron_sync_products', update_variable_get('shopify_cron_sync_products', ''));
  $config->set('cron_sync_collections', update_variable_get('shopify_cron_sync_collections', ''));
  $config->set('cron_sync_time', update_variable_get('shopify_cron_sync_time', '0'));
  $config->set('last_registered_host', update_variable_get('shopify_last_registered_host', ''));
  $config->set('webhooks_debug', update_variable_get('shopify_webhooks_debug', array()));
  $config->set('api_next_timeout', update_variable_get('shopify_api_next_timeout', '0'));
  $config->set('api_call_timeout', update_variable_get('shopify_api_call_timeout', 'API_CALL_TIMEOUT'));
  $config->set('api_call_timeout_multiplier', update_variable_get('shopify_api_call_timeout_multiplier', '4'));
  $config->set('download_images_using_curl', update_variable_get('shopify_download_images_using_curl', array()));
  $config->set('store_info', update_variable_get('shopify_store_info', array()));
  $config->save();

  update_variable_del('shopify_api_domain');
  update_variable_del('shopify_api_token');
  update_variable_del('shopify_api_key');
  update_variable_del('shopify_api_secret');
  update_variable_del('shopify_api_secret');
  update_variable_del('shopify_last_product_sync');
  update_variable_del('shopify_last_collection_sync');
  update_variable_del('shopify_cron_sync_products');
  update_variable_del('shopify_cron_sync_collections');
  update_variable_del('shopify_cron_sync_time');
  update_variable_del('shopify_last_registered_host');
  update_variable_del('shopify_webhooks_debug');
  update_variable_del('shopify_api_next_timeout');
  update_variable_del('shopify_api_call_timeout');
  update_variable_del('shopify_api_call_timeout_multiplier');
  update_variable_del('shopify_download_images_using_curl');
  update_variable_del('shopify_store_info');
}
